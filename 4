using UnityEngine;
using System.Collections;

public class NewBehaviourScript : MonoBehaviour {

	private int[] pk1 = new int[9];  //Массив хранит значения Ккал в час для 1 котла, однако помимо 8 табличных значений, есть значение равное 0, это позволяет сделать очень просым алгоритм подсчета (Понятно что в твоем случае этого даже хранить не надо, все уже есть в таблице).
	private float[] pk1Сost = new float[9];  //Массив хранит стоимость для 1 котла, соотвесвенно с массивом pk1 (тоесть pk1Cost[0] соотвесвует pk1[0] 30 - 18 198,34 р.  и т.д.)Понятно что в твоем случае этого даже хранить не надо, все уже есть в таблице.
	private int[] pk2 = new int[9]; // и т.д.
	private float[] pk2Сost = new float[9];
	private int[] pk3 = new int[9];
	private float[] pk3Сost = new float[9];
	private int[] pk4 = new int[10];
	private float[] pk4Сost = new float[10];
	private int[] pk5 = new int[10];
	private float[] pk5Сost = new float[10];
	private int[] pk6 = new int[10];
	private float[] pk6Сost = new float[10];



	public int _Q; //Значение Q указывается пользователем
	private int tempQ = 0; //Временное хранилище для подсчета суммы
	private float Price = 0.0f; //Сюда запишем наименьшую цену
	private int[] Cotly = new int[6]; //Сюда запишем какие котлы и на какую мощность включать



	private int _acc = 30; //Не обращай внимания, в моем случае используется просто для заполнения значениями

	void Start () {  //На фунцкии Start тоже не заморачивайся, опять же просто заполняю массивы значениями
		for (int i = 0; i < 10; i++) {
			if (i == 9) {
				pk1 [i-1] = 0;
				pk2 [i-1] = 0;
				pk3 [i-1] = 0;
				pk4 [i] = 0;
				pk5 [i] = 0;
				pk6 [i] = 0;
			} else {
				if (i != 8) {
					pk1 [i] = _acc;
					pk2 [i] = _acc;
					pk3 [i] = _acc;
				}
				pk4 [i] = _acc + 30;
				pk5 [i] = _acc + 30;
				pk6 [i] = _acc + 30;
				_acc += 10;
			}
		}

		//Кто знает, тот знает
		//Присваем значение массивам Cost.....



		lookingAll (); // После заполнения массивов данными, уже начинаем непосредвенно считать
	}


	public void lookingAll(){
		float tempPrice = 0.0f; //Временная переменная для стоимости
		for (int i = 0; i < 9; i++) { //Начинаем цикл, проще говоря последовательно проверяем все возможные варианты
			for (int y = 0; y < 9; y++) {
				for (int t = 0; t < 9; t++) {
					for (int r = 0; r < 10; r++) {
						for (int e = 0; e < 10; e++) {
							for (int w = 0; w < 10; w++) {
								tempQ = pk1 [i] + pk2 [y] + pk3 [t] + pk4 [r] + pk5 [e] + pk6 [w]; //Непосредсвенно считаем сумму мощностей
								if (tempQ == _Q) { //Проверяем равна ли полученная сумма тому, что хотим получить
									tempPrice = pk1Сost [i] + pk2Сost [y] + pk3Сost [t] + pk4Сost [r] + pk5Сost [e] + pk6Сost [w]; //Если ровна, то берем данные из массива стоимости и считаем по чем данная комбинация нам обойдется
									if (Price == 0.0f) {//Если стоимость ровна 0, или говоря проще мы тут первый раз,
										Price = tempPrice;//то сразу говорим что временная стоимость ровна основной 
									}
									else if (tempPrice < Price) { //В противном случае (Если стоимость не 0) проверяем не меньше ли новая временная основной
										Price = tempPrice; // И если да, то записываем новую основную стоимость
										Cotly [0] = pk1 [i]; // Тут пнятно что шаговые значения в цикле хранят всю инфрмацию по нашим котлам, впринципе расорядится можно как угодно, я просто пишу в массив мощность
										Cotly [1] = pk2 [y]; // соотвесвенно 0 индекс первый котел 1 индекс второй и т.д. при это понятно то если мощность 0 то котел не используется
										Cotly [2] = pk3 [t];
										Cotly [3] = pk4 [r];
										Cotly [4] = pk5 [e];
										Cotly [5] = pk6 [w];
									} 
								}
							}
						}
					}
				}
			}
		}
		Debug.Log ("Котлы: " + Cotly[0] +" "+ Cotly[1] +" "+ Cotly[2] +" "+ Cotly[3] +" "+ Cotly[4] +" "+ Cotly[5]); //Здесь наш цикл окончен, и мы имеем массив с котлами, и окончательную минимальную стоимость соотвесвенно
		Debug.Log ("Итого: " + Price); // В данной программе они просто выводятся в консоль, а так сам понимаешь, что тебе с ними надо, то и делай )
	}

}
